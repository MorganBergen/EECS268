	list = LinkedList()
	print()
	
	try:
		list.insert(0, "http://google.com")
		list.insert(1, "https://reddit.com")
		list.insert(2, "http://facebook.com")
		list.insert(3, "http://myspace.com")
	except IndexError as e:
		print(e)
		
	print_list(list)
	print()
	
	try:
		list.set_entry(1, "ººººººººº")
		
	except IndexError as mee:
		print("\n", mee, "\n")
	
	print_list(list)
	
	
	list.remove(5)
	print_list(list)
	print()
	
	
def print_list(original):
	if original.is_empty():
		print("list empty")
	else:
		for i in range(original.get_length()):
			print(f"{i} -> ", end="")
		print("\n")
		for i in range(original.get_length()):
			print(f"{original.get_entry(i)} -> ", end="")
			


from linkedlist import LinkedList

class Browser:
	
	def __init__(self, file):
		self.history = LinkedList()
		self.file = file
		self.current = -1
		
	def navigate(self, command, url):
		self.current = self.current + 1
		if self.history.is_empty():
			self.history.insert(self.history.get_length(), url)
		else:
			self.history.insert(self.history.get_length(), url)
		
		
	def print(self, command):
		if self.history.is_empty():
			print("Oldest")
			print(self.current)
			print("===========")
			print("===========")
			print("Newest")
		else:
			print("Oldest")
			print("===========")
			for i in range(self.history.get_length()):
				if i == self.current:
					print(f"{self.history.get_entry(i)} <==current {self.current}")
				else:
					print(self.history.get_entry(i))
			
			print("===========")
			print("Newest")
		
	def back(self, command):
		self.current = self.current - 1
		
		
	def forward(self, command):
		self.current = self.current + 1
		print(self.current)
	
	def fileIO(self):
		
		in_file = open(self.file)
		
		for line in in_file:
			command = line.split()
			if command[0] == "NAVIGATE":
				self.navigate(command[0], command[1])
				
			elif command[0] == "HISTORY":
				self.print(command[0])
				
			elif command[0] == "BACK":
				self.back(command[0])
				
			elif command[0] == "FORWARD":
				self.forward(command[0])
			
		in_file.close()
	


'''
history.get_length()
history.is_empty()
history.get_entry(index, data)
histroy.clear()


raises index errors
	history.get_node_at(index)
	history.insert(index, data)
	history.get_entry(index)
	
raises runtime error and index error
	histroy.remove(index)
	
'''



from linkedlist import LinkedList

class Browser:
	
	def __init__(self, file):
		self.web = LinkedList() #self.web_history rename after youre done
		self.current = 0
		self.file = file
		
		
	def navigate_to(self, url):
		if self.web.is_empty():
			self.web.insert(0, url)
			self.current = 0
		
		elif (self.web.get_length() - 1) == self.current:
			self.web.insert(self.web.get_length(), url)
			self.current = self.web.get_length() - 1
		# length = 6, current = 2
		# remove index 3, 4, 5
		# position = 3
		# remove(3)
		# remove (4)
		# remove(5)
		else:
			for x in reversed(range(self.current+1, self.web.get_length())):
				self.web.remove(x)
		# current = 2
		# current = 2 + 1
		# insert (3, url)
			self.current = self.current + 1
			self.web.insert(self.current, url)
		self.history()
			
	def back(self):
		if self.current == 0:
			print(f"BACK | <== current {self.current}")
		else:
			self.current = self.current - 1
			print(f"BACK | <== current {self.current}")
		
	def forward(self):
		if self.current == self.web.get_length() - 1:
			print(f"FORWARD | <== current {self.current}")
		else:
			self.current = self.current + 1
			print(f"FORWARD | <== current {self.current}")
		
	def history(self):
		print("Oldest")
		print("===========")
		for i in range(self.web.get_length()):
			if i == self.current:
				print(f"{i} {self.web.get_entry(i)} <== current {self.current}")
			else:
				print(f"{i} {self.web.get_entry(i)}")
		print("===========")
		print("Newest")
		
	def tester(self):
		self.navigate_to("http://google.com")
		self.navigate_to("http://reddit.com")
		self.navigate_to("http://facebook.com")
		self.navigate_to("http://myspace.com")
		self.history()
		self.back()
		self.back()
		self.history()
		self.forward()
		self.forward()
		self.forward()
		self.forward()
		self.history()
		self.back()
		self.back()
		self.back()
		self.history()
		self.navigate_to("https://ku.edu")
	
	def fileIO(self):
		
		in_file = open(self.file)
		
		for line in in_file:
			command = line.split()
			if command[0] == "NAVIGATE":
				self.navigate(command[0], command[1])
				
			elif command[0] == "HISTORY":
				self.print(command[0])
				
			elif command[0] == "BACK":
				self.back(command[0])
				
			elif command[0] == "FORWARD":
				self.forward(command[0])
			
		in_file.close()
	


'''
history.get_length()
history.is_empty()
history.get_entry(index, data)
histroy.clear()


raises index errors
	history.get_node_at(index)
	history.insert(index, data)
	history.get_entry(index)
	
raises runtime error and index error
	histroy.remove(index)
	
'''


#
#	def tester(self):
#		self.navigate_to("http://google.com")
#		self.navigate_to("http://reddit.com")
#		self.navigate_to("http://facebook.com")
#		self.navigate_to("http://myspace.com")
#		self.history()
#		self.back()
#		self.back()
#		self.history()
#		self.forward()
#		self.forward()
#		self.forward()
#		self.forward()
#		self.history()
#		self.back()
#		self.back()
#		self.back()
#		self.navigate_to("https://ku.edu")
#		self.forward()
#		self.history()
#		self.back()
#		self.history()
